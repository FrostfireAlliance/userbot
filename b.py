from telethon import TelegramClient, events
import asyncio
from telethon.errors import ChatAdminRequiredError, ChatWriteForbiddenError, ChannelPrivateError, ChannelInvalidError, FloodWaitError, RpcCallFailError

api_id = '20045757'
api_hash = '7d3ea0c0d4725498789bd51a9ee02421'
phone = '+380996856403'

client = TelegramClient('userbot', api_id, api_hash)

forward_message = None
send_interval = 0
stop_sending = asyncio.Event()
sending_active = False
user_id = None
target_chat_id = None

@client.on(events.NewMessage(outgoing=True))
async def handle_message(event):
    global forward_message, send_interval, stop_sending, sending_active, user_id, target_chat_id

    if event.sender_id == user_id:
        print(f"Received message from self: {event.text}")

        if event.text.startswith('.start'):
            await event.edit(
        '**üë®‚Äçüíª –ö–æ–º–∞–Ω–¥—ã:**\n'
        '`.start` **- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é.**\n'
        '`.send (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö) (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)` **- –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.**\n'
        '`.stop` **- –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.**\n\n'
        '**üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: foxy437.t.me**'
            )

        elif event.text.startswith('.send '):
            if sending_active:
                await event.edit('–Ø –Ω–µ –º–æ–≥—É 2 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å...')
                return

            try:
                args = event.text.split(maxsplit=2)
                if len(args) < 3:
                    raise ValueError('–¢—É–ø–æ–π... –í–æ—Ç —Ç–∞–∫ –Ω–∞–¥–æ: .send (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö) (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)')

                send_interval = int(args[1]) * 60
                link = args[2]

                parts = link.split('/')
                if len(parts) < 2:
                    raise ValueError('–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ....')

                chat_id = parts[-2]
                message_id = int(parts[-1])

                if chat_id.startswith('c'):
                    chat_id = int(chat_id[1:])
                else:
                    chat_id = int(chat_id)

                target_chat_id = event.chat_id
                forward_message = (chat_id, message_id)
                sending_active = True
                stop_sending.clear()
                await event.edit(f'–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {send_interval // 60} –º–∏–Ω—É—Ç.')

                while not stop_sending.is_set():
                    if forward_message:
                        chat_id, message_id = forward_message
                        try:
                            await client.forward_messages(target_chat_id, message_id, chat_id)
                            print(f"Forwarded message {message_id} from chat {chat_id}")
                        except (ChatAdminRequiredError, ChatWriteForbiddenError):
                            await event.reply('–£ –º–µ–Ω—è –ø—Ä–∞–≤ –Ω–µ—Ç—É(')
                            stop_sending.set()
                        except (ChannelPrivateError, ChannelInvalidError):
                            await event.reply('...')
                            stop_sending.set()
                        except FloodWaitError as e:
                            await event.reply(f'–≠—ç—ç –±–ª—è—Ç—å –º–Ω–µ –ª–∏–º–∏—Ç –ø–æ—Å—Ç–∞–≤–∏–ª–∏(((')
                            stop_sending.set()
                        except RpcCallFailError as e:
                            await event.reply(f'–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —É –º–µ–Ω—è....')
                            stop_sending.set()
                        except Exception as e:
                            print(f"–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —É –º–µ–Ω—è....")
                            await event.reply(f'–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —É –º–µ–Ω—è....')
                    
                    await asyncio.sleep(send_interval)

            except ValueError as e:
                await event.edit(f'–û—à–∏–±–∫–∞: {str(e)}')
            except Exception as e:
                await event.edit(f'–û—à–∏–±–∫–∞: {str(e)}')

        elif event.text.startswith('.stop'):
            if not sending_active:
                await event.edit('–¢—ã –¥–∞–∂–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –º–µ–Ω—è.....')
                return
            stop_sending.set()
            sending_active = False
            await event.edit('–û—Å—Ç–∞–Ω–æ–≤–∏–ª.')

async def main():
    global user_id
    await client.start(phone)
    me = await client.get_me()
    user_id = me.id
    await client.send_message(user_id,
        '**üë®‚Äçüíª –ö–æ–º–∞–Ω–¥—ã:**\n'
        '`.start` **- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é.**\n'
        '`.send (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö) (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)` **- –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.**\n'
        '`.stop` **- –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.**\n\n'
        '**üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: foxy437.t.me**'
    )
    await client.run_until_disconnected()

client.loop.run_until_complete(main())